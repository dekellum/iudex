#!/usr/bin/env jruby
# -*- ruby -*-

#--
# Copyright (c) 2011 David Kellum
#
# Licensed under the Apache License, Version 2.0 (the "License"); you
# may not use this file except in compliance with the License.  You
# may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.  See the License for the specific language governing
# permissions and limitations under the License.
#++

$LOAD_PATH.unshift File.join( File.dirname(__FILE__), "..", "lib" )

module IudexBruteFuzzyClient

  require 'rubygems'
  require 'rjack-logback'

  include RJack
  Logback.config_console( :thread => true )

  require 'iudex-brutefuzzy-service'
  require 'iudex-brutefuzzy-service/destinations'

  include Iudex
  include Iudex::BruteFuzzy::Service
  include Iudex::SimHash::BruteFuzzy

  Hooker.log_with { |m| SLF4J[ 'iudex' ].info( m.rstrip ) }

  def self.parse_options
    options = {}

    OptionParser.new do |opts|
      opts.banner = <<BANNER
Usage: iudex-brutefuzzy-client [options] | [KeyFile]...
BANNER
      opts.on( "--sample-random-keys N", Integer,
               "Sample N randomly selected test keys to stdout" ) do |n|
        options[ :sample_random_keys ] = n
      end
      opts.on( "--add-random-keys N", Integer,
               "Add N randomly selected test keys to the service" ) do |n|
        options[ :add_random_keys ] = n
      end
      opts.on( "-v", "--version", "Display version and exit" ) do
        puts "iudex-brutefuzzy-client: #{ Iudex::BruteFuzzy::Service::VERSION }"
        exit 1
      end
      opts.on( "-d", "--debug", "Enable verbose DEBUG logging" ) do
        Logback[ 'iudex' ].level = Logback::DEBUG
      end
      Hooker.register_config( opts )
    end.parse!

    options
  end

  import 'iudex.brutefuzzy.service.Client'
  import 'rjack.jms.JMSConnector'

  BruteFuzzyUtil = Java::iudex.simhash.brutefuzzy.BruteFuzzy

  def self.random_keys( n )
    while n > 0
      c = [ n, 1_000_000 ].min
      yield BruteFuzzyUtil.testKeys( c, 3, rand( 999_999_999 ) )
      n -= c
    end
  end

  def self.keys_from_files( files, bsize = 1_000 )
    buffer = []

    files.each do |fname|
      open( fname, 'r' ) do |fin|
        fin.each do |line|
          buffer << BruteFuzzyUtil.unsignedHexToLong( line.rstrip )
          if buffer.length >= bsize
            yield buffer
            buffer.clear
          end
        end
        yield buffer unless buffer.empty?
      end
    end
  end

  def self.run
    @log = SLF4J[ 'iudex.brutefuzzy.service.Client' ]

    options = parse_options
    @cnt = 0

    if ( n = options[ :sample_random_keys ] )
      random_keys( n ) { |keys| write_batch( keys ) }
    else
      with_client do
        if ( n = options[ :add_random_keys ] )
          random_keys( n ) { |keys| check_batch( keys ) }
        else
          keys_from_files( ARGV ) { |keys| check_batch( keys ) }
        end
      end
    end
  end

  def self.with_client
    # Wire up JMS client
    Hooker.with( :iudex ) do |h|
      ctx = QpidClient::QpidJMSContext.new
      Destinations.apply( ctx )
      h.apply( :jms_context, ctx )

      @connector = h.apply( :jms_connector, JMSConnector.new( ctx ) )
      @connector.do_close_connections = false
      @connector.start

      @client = h.apply( :brutefuzzy_client, Client.new( @connector ) )

    end

    yield
  ensure
    if @client
      @client.close
      @client = nil
    end
    @connector.stop if @connector
  end

  def self.check_batch( keys )
    keys.each do |k|
      @client.check( k, true )
      @cnt += 1
      @log.info( "Sent: #{ @cnt }" ) if ( @cnt % 100_000 ) == 0
    end
  end

  def self.write_batch( keys )
    keys.each do |k|
      h = Java::java.lang.Long::toHexString( k )
      (16 - h.length).times { $stdout.write '0' }
      puts h
    end
    @cnt += keys.length
  end

  run

end
