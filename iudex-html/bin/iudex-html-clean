#!/usr/bin/env jruby
# -*- ruby -*-
#--
# Copyright (c) 2012 David Kellum
#
# Licensed under the Apache License, Version 2.0 (the "License"); you
# may not use this file except in compliance with the License.  You may
# obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.  See the License for the specific language governing
# permissions and limitations under the License.
#++

$LOAD_PATH.unshift File.join( File.dirname(__FILE__), "..", "lib" )

require 'rubygems'

module IudexBinScript
  require 'rjack-logback'
  include RJack

  Logback.config_console( :stderr => true )

  require 'iudex-html'
  require 'iudex-filter/key_helper'

  require 'gravitext-xmlprod/extensions'

  require 'java'

  class HTMLCleaner
    include Gravitext::XMLProd
    include Iudex::Core
    include Iudex::HTML
    include Iudex::HTML::Tree
    include Iudex::HTML::Filters
    include Iudex::HTML::Tree::Filters

    import 'iudex.html.HTMLUtils'
    import 'iudex.html.neko.NekoHTMLParser'
    import 'iudex.html.tree.TreeWalker'
    import 'iudex.http.Headers'
    import 'iudex.util.Charsets'

    def initialize
      @default_encoding = "UTF-8"
      @trim_non_displayed = false
      @indentor = Indentor::PRETTY
    end

    def run( args = ARGV )
      files = parse_args( args )

      files.each do |f|
        if f =~ /\.barc$/
          process_barc( f )
        else
          process_file( f )
        end
      end

    end

    def process_file( fname )

      input = if fname == '-'
                $stdin.read
              else
                IO.read( fname )
              end

      source = HTMLUtils::source( input.to_java_bytes, @default_encoding )
      process( source )
    end

    def process_barc( bname )
      require 'iudex-barc' #FIXME: Undeclared
      barc_file = Iudex::BARC::BARCFile.new( java.io.File.new( bname ) )
      barc_reader = barc_file.reader
      while( rec = barc_reader.next )
        next unless rec.type.chr == 'H'
        source = ContentSource.new( rec.body_input_stream )
        ctype = Headers.content_type( rec.response_headers )
        if ctype && ctype.charset
          enc = Charsets.lookup( ctype.charset )
          source.set_default_encoding( enc ) if enc
        end
        process( source )
      end
    end

    def process( source )
      parser = NekoHTMLParser.new
      parser.skip_banned = @trim_non_displayed

      tree = parser.parse( source )

      filters = [ XmpToPreConverter.new,
                  ( [ CSSDisplayFilter.new,
                      AttributeCleaner.new ] if @trim_non_displayed ),
                  MojiBakeCleaner.new,
                  CharactersNormalizer.new,
                  EmptyInlineRemover.new ].flatten.compact

      TreeWalker.walk_depth_first( TreeFilterChain.new( filters ),
                                   tree )

      puts tree.to_xml( :indentor => @indentor )
    end

    def parse_args( args = ARGV )
      parser = OptionParser.new do |opts|
        opts.banner =
          "Usage: iudex-html-clean [options] (FILE|barc)...\n" +
          "Options:\n"

        opts.on( "-v", "--version", "Display version and exit" ) do
          puts "iudex-html: #{Iudex::HTML::VERSION}"
          exit 1
        end

        opts.on( "-t", "--trim-non-display",
                 "Trim banned/non-displayed elements from output" ) do
          @trim_non_displayed = true
        end

        opts.on( "-i", "--indentor NAME",
                 "Specify indentor to use for output: " +
                 "PRETTY (default), COMPACT" ) do |name|
          @indentor = Indentor.const_get( name.upcase.to_sym )
        end

      end

      parser.parse( args )
    end

  end

  HTMLCleaner.new.run
end
